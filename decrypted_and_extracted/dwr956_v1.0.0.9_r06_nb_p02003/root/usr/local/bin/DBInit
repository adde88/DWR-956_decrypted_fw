#!/bin/sh
#
#   Used to init JNR platform after platform init finish.
#   Note that, platform need prepare current configuration before using
#   this script. The detail flow chart you can reference JNRP design document.
#
sqlCmd="/usr/local/bin/sqlite3"
sysDBsch="/usr/local/etc/system.sql"
voipSql="/usr/local/etc/voip.sql"
usrSQL="/usr/local/etc/user.sql"
sysDB="/tmp/system.db"
cmngrDB="/tmp/cmngr.db"
jnrAscii="/sysconfig/jnr-cfg.ascii"
jnrAsciiDef="/usr/local/etc/jnr-cfg.ascii.default"
jnrAsciiPch="/usr/local/etc/jnr-cfg.ascii.patch"
importDBCmd="/usr/local/bin/import_db"
ddCfgCmd="/usr/sbin/savecfg.sh"
varLogMsg="/var/log/messages"
ipv6Conf="/sysconfig/ipv6-cfg"
ipv6ConfDef="/usr/local/etc/ipv6-cfg.default"
vpnConf="/sysconfig/vpn-cfg"
vpnConfDef="/usr/local/etc/vpn-cfg.default"
sambaConf="/sysconfig/samba-cfg"
sambaConfDef="/usr/local/etc/samba-cfg.default"

vol_name=`uboot_env --get --name kernelname`

if [ "$vol_name" = "kernel" ]; then
    VERSION=`uboot_env --get --name part1_version`
elif [ "$vol_name" = "kernelb" ]; then
    VERSION=`uboot_env --get --name part2_version`
else
    VERSION=`uboot_env --get --name part1_version`
fi

sed -i "s/.*firmwareVer.*/config.system\[1\]\[\"firmwareVer\"\] = \"${VERSION}\"/" ${jnrAscii}

# Prepare: umi.ko must to have
insmod /lib/modules/2.6.32.42/umi.ko  > /dev/null 2>&1

# step 1: import schema
rm -f ${sysDB}
${sqlCmd} ${sysDB} < ${sysDBsch} > /dev/null 2>&1

#rm -f ${cmngrDB}
#${sqlCmd} ${cmngrDB} < ${voipSql} > /dev/null 2>&1

# step 2: import UMI Register table
${sqlCmd} ${sysDB} < ${usrSQL} > /dev/null 2>&1

# step 3: import user configuration from ascii
status=0
if [ -e ${jnrAscii} ]; then
    echo "Importing configuration..."
else
    echo "User configuration doesn't exist..."
    echo "Restore configuration..."
    echo "jnrInit: User configuration doesn't exist... Restore configuration..." >> ${varLogMsg}
    cp ${jnrAsciiDef} ${jnrAscii}
    /usr/local/bin/update_to_default_config_essid.sh  $jnrAscii
    /usr/local/bin/update_to_default_config.sh  $jnrAscii
    /usr/local/bin/update_to_default_config_sn.sh  $jnrAscii
    /usr/local/bin/update_to_default_config_wpakey.sh $jnrAscii
    /usr/local/bin/update_to_default_config_imei.sh   $jnrAscii
    sed -i "s/.*firmwareVer.*/config.system\[1\]\[\"firmwareVer\"\] = \"${VERSION}\"/" ${jnrAscii}
    ${ddCfgCmd} && sync
    cp -f /usr/local/etc/lte_connection_settings /mnt/data/lte_connection_settings
fi

if [ ! -s ${jnrAscii} ]
then 
	echo "${jnrAscii} is empty, try again 3s later...."
	echo "jnrInit: ${jnrAscii} is empty, try again 3s later...." >> ${varLogMsg}
	sleep 3

    echo "Restore configuration..."
    cp ${jnrAsciiDef} ${jnrAscii}
    /usr/local/bin/update_to_default_config_essid.sh  $jnrAscii
    /usr/local/bin/update_to_default_config.sh  $jnrAscii
    /usr/local/bin/update_to_default_config_sn.sh  $jnrAscii
    /usr/local/bin/update_to_default_config_wpakey.sh $jnrAscii
    /usr/local/bin/update_to_default_config_imei.sh   $jnrAscii
    sed -i "s/.*firmwareVer.*/config.system\[1\]\[\"firmwareVer\"\] = \"${VERSION}\"/" ${jnrAscii}
    ${ddCfgCmd} && sync
    cp -f /usr/local/etc/lte_connection_settings /mnt/data/lte_connection_settings
fi

if [ ! -s ${jnrAscii} ]
then 
	echo "${jnrAscii} is empty, try again 6s later.... "
	echo "jnrInit: ${jnrAscii} is empty, try again 6s later...." >> ${varLogMsg}
	sleep 6
	
    echo "Restore configuration..."
    cp ${jnrAsciiDef} ${jnrAscii}
    /usr/local/bin/update_to_default_config_essid.sh  $jnrAscii
    /usr/local/bin/update_to_default_config.sh  $jnrAscii
    /usr/local/bin/update_to_default_config_sn.sh  $jnrAscii
    /usr/local/bin/update_to_default_config_wpakey.sh $jnrAscii
    /usr/local/bin/update_to_default_config_imei.sh   $jnrAscii
    sed -i "s/.*firmwareVer.*/config.system\[1\]\[\"firmwareVer\"\] = \"${VERSION}\"/" ${jnrAscii}
    ${ddCfgCmd} && sync
    cp -f /usr/local/etc/lte_connection_settings /mnt/data/lte_connection_settings
fi

if [ ! -s ${jnrAscii} ]
then 
	echo "${jnrAscii} is empty, try again 9s later.... "
	echo "jnrInit: ${jnrAscii} is empty, try again 9s later...." >> ${varLogMsg}
	sleep 9

    echo "Restore configuration..."
    cp ${jnrAsciiDef} ${jnrAscii}
    /usr/local/bin/update_to_default_config_essid.sh  $jnrAscii
    /usr/local/bin/update_to_default_config.sh  $jnrAscii
    /usr/local/bin/update_to_default_config_sn.sh  $jnrAscii
    /usr/local/bin/update_to_default_config_wpakey.sh $jnrAscii
    /usr/local/bin/update_to_default_config_imei.sh   $jnrAscii
    sed -i "s/.*firmwareVer.*/config.system\[1\]\[\"firmwareVer\"\] = \"${VERSION}\"/" ${jnrAscii}
    ${ddCfgCmd} && sync
    cp -f /usr/local/etc/lte_connection_settings /mnt/data/lte_connection_settings
fi

${importDBCmd} ${sysDB} ${jnrAscii} ${jnrAsciiDef} ${jnrAsciiPch}
status=$?
if [ "$status" -ne "0" ]; then
    echo "Importing configuration failed..."
    cp -f ${jnrAsciiDef} ${jnrAscii}
    ${ddCfgCmd} && sync
    cp -f /usr/local/etc/lte_connection_settings /mnt/data/lte_connection_settings
    sleep 1 && sync
    reboot
fi
sleep 1 && sync

if [ ! -s ${ipv6Conf} ]
then
    echo "ipv6 config does not exist."
    cp -f ${ipv6ConfDef} ${ipv6Conf}
fi

if [ ! -s ${vpnConf} ]
then
    echo "vpn config does not exist."
    cp -f ${vpnConfDef} ${vpnConf}
fi

if [ ! -s ${sambaConf} ]
then
    echo "samba config does not exist."
    cp -f ${sambaConfDef} ${sambaConf}
fi

evtDsptchd /tmp/system.db &
